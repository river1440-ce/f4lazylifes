"""init: rebuild all tables due to not define naming convention

Revision ID: deb6d0f2165a
Revises:
Create Date: 2024-11-19 22:54:52.994606

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "deb6d0f2165a"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "age",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("year", sa.SmallInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_age")),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(length=64), nullable=False),
        sa.Column("email", sa.String(length=120), nullable=False),
        sa.Column("password_hash", sa.String(length=256), nullable=True),
        sa.Column("about_me", sa.String(length=140), nullable=True),
        sa.Column("last_seen", sa.DateTime(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user")),
    )
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_user_email"), ["email"], unique=True)
        batch_op.create_index(batch_op.f("ix_user_username"), ["username"], unique=True)

    op.create_table(
        "accident",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("upper_from_salary_ratio", sa.Numeric(), nullable=False),
        sa.Column("lower_from_salary_ratio", sa.Numeric(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["user.id"], name=op.f("fk_accident_owner_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_accident")),
    )
    with op.batch_alter_table("accident", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_accident_owner_id"), ["owner_id"], unique=False
        )

    op.create_table(
        "child",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("born_at_age", sa.Integer(), nullable=False),
        sa.Column("independent_year", sa.Integer(), nullable=True),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["born_at_age"], ["age.id"], name=op.f("fk_child_born_at_age_age")
        ),
        sa.ForeignKeyConstraint(
            ["independent_year"], ["age.id"], name=op.f("fk_child_independent_year_age")
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["user.id"], name=op.f("fk_child_owner_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_child")),
    )
    with op.batch_alter_table("child", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_child_owner_id"), ["owner_id"], unique=False
        )

    op.create_table(
        "expense",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("start_year", sa.Integer(), nullable=False),
        sa.Column("end_year", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["end_year"], ["age.id"], name=op.f("fk_expense_end_year_age")
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["user.id"], name=op.f("fk_expense_owner_id_user")
        ),
        sa.ForeignKeyConstraint(
            ["start_year"], ["age.id"], name=op.f("fk_expense_start_year_age")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_expense")),
    )
    with op.batch_alter_table("expense", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_expense_owner_id"), ["owner_id"], unique=False
        )

    op.create_table(
        "house",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column("interest", sa.Integer(), nullable=False),
        sa.Column("loan_term", sa.Integer(), nullable=False),
        sa.Column("buy_at_age", sa.Integer(), nullable=False),
        sa.Column("sell_at_age", sa.Integer(), nullable=True),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["buy_at_age"], ["age.id"], name=op.f("fk_house_buy_at_age_age")
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["user.id"], name=op.f("fk_house_owner_id_user")
        ),
        sa.ForeignKeyConstraint(
            ["sell_at_age"], ["age.id"], name=op.f("fk_house_sell_at_age_age")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_house")),
    )
    with op.batch_alter_table("house", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_house_owner_id"), ["owner_id"], unique=False
        )

    op.create_table(
        "investment",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("start_year", sa.Integer(), nullable=False),
        sa.Column("end_year", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["end_year"], ["age.id"], name=op.f("fk_investment_end_year_age")
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["user.id"], name=op.f("fk_investment_owner_id_user")
        ),
        sa.ForeignKeyConstraint(
            ["start_year"], ["age.id"], name=op.f("fk_investment_start_year_age")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_investment")),
    )
    with op.batch_alter_table("investment", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_investment_owner_id"), ["owner_id"], unique=False
        )

    op.create_table(
        "salary",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("start_year", sa.Integer(), nullable=False),
        sa.Column("end_year", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["end_year"], ["age.id"], name=op.f("fk_salary_end_year_age")
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["user.id"], name=op.f("fk_salary_owner_id_user")
        ),
        sa.ForeignKeyConstraint(
            ["start_year"], ["age.id"], name=op.f("fk_salary_start_year_age")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_salary")),
    )
    with op.batch_alter_table("salary", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_salary_owner_id"), ["owner_id"], unique=False
        )

    op.create_table(
        "scenario",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("retire_age", sa.Integer(), nullable=False),
        sa.Column("accident_id", sa.Integer(), nullable=False),
        sa.Column("investment_ratio", sa.Numeric(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["accident_id"],
            ["accident.id"],
            name=op.f("fk_scenario_accident_id_accident"),
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["user.id"], name=op.f("fk_scenario_owner_id_user")
        ),
        sa.ForeignKeyConstraint(
            ["retire_age"], ["age.id"], name=op.f("fk_scenario_retire_age_age")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_scenario")),
    )
    with op.batch_alter_table("scenario", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_scenario_accident_id"), ["accident_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_scenario_owner_id"), ["owner_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_scenario_retire_age"), ["retire_age"], unique=False
        )

    op.create_table(
        "scenario_child",
        sa.Column("left_id", sa.Integer(), nullable=False),
        sa.Column("right_id", sa.Integer(), nullable=False),
        sa.Column("born_at_age", sa.Integer(), nullable=False),
        sa.Column("independent_year", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["born_at_age"], ["age.id"], name=op.f("fk_scenario_child_born_at_age_age")
        ),
        sa.ForeignKeyConstraint(
            ["independent_year"],
            ["age.id"],
            name=op.f("fk_scenario_child_independent_year_age"),
        ),
        sa.ForeignKeyConstraint(
            ["left_id"],
            ["scenario.id"],
            name=op.f("fk_scenario_child_left_id_scenario"),
        ),
        sa.ForeignKeyConstraint(
            ["right_id"], ["child.id"], name=op.f("fk_scenario_child_right_id_child")
        ),
        sa.PrimaryKeyConstraint("left_id", "right_id", name=op.f("pk_scenario_child")),
    )
    op.create_table(
        "scenario_expense",
        sa.Column("left_id", sa.Integer(), nullable=False),
        sa.Column("right_id", sa.Integer(), nullable=False),
        sa.Column("upper_raise_rate", sa.Numeric(), nullable=False),
        sa.Column("lower_raise_rate", sa.Numeric(), nullable=False),
        sa.Column("start_year", sa.Integer(), nullable=False),
        sa.Column("end_year", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["end_year"], ["age.id"], name=op.f("fk_scenario_expense_end_year_age")
        ),
        sa.ForeignKeyConstraint(
            ["left_id"],
            ["scenario.id"],
            name=op.f("fk_scenario_expense_left_id_scenario"),
        ),
        sa.ForeignKeyConstraint(
            ["right_id"],
            ["expense.id"],
            name=op.f("fk_scenario_expense_right_id_expense"),
        ),
        sa.ForeignKeyConstraint(
            ["start_year"], ["age.id"], name=op.f("fk_scenario_expense_start_year_age")
        ),
        sa.PrimaryKeyConstraint(
            "left_id", "right_id", name=op.f("pk_scenario_expense")
        ),
    )
    op.create_table(
        "scenario_house",
        sa.Column("left_id", sa.Integer(), nullable=False),
        sa.Column("right_id", sa.Integer(), nullable=False),
        sa.Column("buy_at_age", sa.Integer(), nullable=False),
        sa.Column("sell_at_age", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["buy_at_age"], ["age.id"], name=op.f("fk_scenario_house_buy_at_age_age")
        ),
        sa.ForeignKeyConstraint(
            ["left_id"],
            ["scenario.id"],
            name=op.f("fk_scenario_house_left_id_scenario"),
        ),
        sa.ForeignKeyConstraint(
            ["right_id"], ["house.id"], name=op.f("fk_scenario_house_right_id_house")
        ),
        sa.ForeignKeyConstraint(
            ["sell_at_age"], ["age.id"], name=op.f("fk_scenario_house_sell_at_age_age")
        ),
        sa.PrimaryKeyConstraint("left_id", "right_id", name=op.f("pk_scenario_house")),
    )
    op.create_table(
        "scenario_investment",
        sa.Column("left_id", sa.Integer(), nullable=False),
        sa.Column("right_id", sa.Integer(), nullable=False),
        sa.Column("upper_return_rate", sa.Numeric(), nullable=False),
        sa.Column("lower_return_rate", sa.Numeric(), nullable=False),
        sa.Column("percentage_from_saving", sa.Numeric(), nullable=False),
        sa.Column("start_year", sa.Integer(), nullable=False),
        sa.Column("end_year", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["end_year"], ["age.id"], name=op.f("fk_scenario_investment_end_year_age")
        ),
        sa.ForeignKeyConstraint(
            ["left_id"],
            ["scenario.id"],
            name=op.f("fk_scenario_investment_left_id_scenario"),
        ),
        sa.ForeignKeyConstraint(
            ["right_id"],
            ["investment.id"],
            name=op.f("fk_scenario_investment_right_id_investment"),
        ),
        sa.ForeignKeyConstraint(
            ["start_year"],
            ["age.id"],
            name=op.f("fk_scenario_investment_start_year_age"),
        ),
        sa.PrimaryKeyConstraint(
            "left_id", "right_id", name=op.f("pk_scenario_investment")
        ),
    )
    op.create_table(
        "scenario_salary",
        sa.Column("left_id", sa.Integer(), nullable=False),
        sa.Column("right_id", sa.Integer(), nullable=False),
        sa.Column("upper_raise_rate", sa.Numeric(), nullable=False),
        sa.Column("lower_raise_rate", sa.Numeric(), nullable=False),
        sa.Column("start_year", sa.Integer(), nullable=False),
        sa.Column("end_year", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["end_year"], ["age.id"], name=op.f("fk_scenario_salary_end_year_age")
        ),
        sa.ForeignKeyConstraint(
            ["left_id"],
            ["scenario.id"],
            name=op.f("fk_scenario_salary_left_id_scenario"),
        ),
        sa.ForeignKeyConstraint(
            ["right_id"], ["salary.id"], name=op.f("fk_scenario_salary_right_id_salary")
        ),
        sa.ForeignKeyConstraint(
            ["start_year"], ["age.id"], name=op.f("fk_scenario_salary_start_year_age")
        ),
        sa.PrimaryKeyConstraint("left_id", "right_id", name=op.f("pk_scenario_salary")),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("scenario_salary")
    op.drop_table("scenario_investment")
    op.drop_table("scenario_house")
    op.drop_table("scenario_expense")
    op.drop_table("scenario_child")
    with op.batch_alter_table("scenario", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_scenario_retire_age"))
        batch_op.drop_index(batch_op.f("ix_scenario_owner_id"))
        batch_op.drop_index(batch_op.f("ix_scenario_accident_id"))

    op.drop_table("scenario")
    with op.batch_alter_table("salary", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_salary_owner_id"))

    op.drop_table("salary")
    with op.batch_alter_table("investment", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_investment_owner_id"))

    op.drop_table("investment")
    with op.batch_alter_table("house", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_house_owner_id"))

    op.drop_table("house")
    with op.batch_alter_table("expense", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_expense_owner_id"))

    op.drop_table("expense")
    with op.batch_alter_table("child", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_child_owner_id"))

    op.drop_table("child")
    with op.batch_alter_table("accident", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_accident_owner_id"))

    op.drop_table("accident")
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_user_username"))
        batch_op.drop_index(batch_op.f("ix_user_email"))

    op.drop_table("user")
    op.drop_table("age")
    # ### end Alembic commands ###
